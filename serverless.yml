service: multi-front-poc

provider:
  name: aws
  deploymentBucket:
    name: serverless-ema-multi-front-poc

plugins:
  - serverless-deployment-bucket
  - serverless-s3-sync
  - serverless-pseudo-parameters
  - serverless-cloudfront-invalidate


.bucketDefaultsProps: &BucketDefaultsProps
  AccessControl: Private
  WebsiteConfiguration:
    IndexDocument: index.html
    ErrorDocument: index.html
  PublicAccessBlockConfiguration:
    BlockPublicAcls: true
    BlockPublicPolicy: true
    IgnorePublicAcls: true
    RestrictPublicBuckets: true

custom:
  AcmCertificateArn: <<<<<<<<<<<<<<___________________________CHANGE_________________________>>>>>>>>>>>>
  ApiOriginDomain: api.dev.teamname.us-east-1.aws.com
  Route53Cname: multifront.dev.teamname.us-east-1.aws.com

  cloudfrontInvalidate:
    distributionIdKey: "CloudFrontDistributionId"
    items: # one or more paths required
      - "/*"
  s3Sync:
    - bucketName: ema-multi-front-test-app-1
      localDir: dist-html/front-app-1
    - bucketName: ema-multi-front-test-app-2
      localDir: dist-html/front-app-2

functions:
  FnLambdaAtEdge:
    name: multiFrontChangeOrigin
    description: multi front rewrite uri for buckets index html
    handler: lambdaAtEdge.handler
    runtime: nodejs12.x
    events:
      - cloudFront:
          eventType: origin-request
          pathPattern: /front-2
          origin: "s3://#{s3App2.DomainName}"
      - cloudFront:
          eventType: origin-request
          pathPattern: /front-2/*
          origin: "s3://#{s3App2.DomainName}"
      - cloudFront:
          eventType: origin-request
          pathPattern: /front-1
          origin: "s3://#{s3App1.DomainName}"
      - cloudFront:
          eventType: origin-request
          pathPattern: /front-1/*
          origin: "s3://#{s3App1.DomainName}"

resources:
  Resources:
    CloudFrontOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Cloud front access to S3"
    s3App1:
      Type: "AWS::S3::Bucket"
      Properties:
        <<: *BucketDefaultsProps
        BucketName: ema-multi-front-test-app-1
    s3App2:
      Type: "AWS::S3::Bucket"
      Properties:
        <<: *BucketDefaultsProps
        BucketName: ema-multi-front-test-app-2
    s3App1Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: "#{s3App1}"
        PolicyDocument:
          Statement:
            - Sid: "PublicReadGetObject"
              Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: "arn:aws:s3:::#{s3App1}/*"
              Principal:
                AWS: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity #{CloudFrontOriginAccessIdentity}"
    s3App2Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: "#{s3App2}"
        PolicyDocument:
          Statement:
            - Sid: "PublicReadGetObject"
              Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: "arn:aws:s3:::#{s3App2}/*"
              Principal:
                AWS: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity #{CloudFrontOriginAccessIdentity}"
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - s3App1
        - s3App2
        - CloudFrontOriginAccessIdentity
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.Route53Cname}
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: s3-app1
            Compress: true
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - TargetOriginId: s3-app1
              PathPattern: /front-1
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
# TODO para asociar un lambda edge a cloud front se tiene que hacer referencia
# al lambdaFunctionVersion pero "este recurso" lo genera automaticamente
# serverless agregando un hash aleatorio al final.. y no se puede referenciar
# (la posible solucion es hacer un plugin que busque en el cloudformation json
# ete recurso)... Otro punto si desabilitamos el "versionado de lambda" para que
# serverless no la genere no funciona quizas hay un bug... y da error si creamos
# un recurso propio para versionar el lambda ya que serverless crea su lambda
# version con el hash y da error cloud formation al intentar crear 2 recursos
# con el mismo id...
            - TargetOriginId: s3-app1
              PathPattern: /front-1/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
            - TargetOriginId: s3-app2
              PathPattern: /front-2
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
            - TargetOriginId: s3-app2
              PathPattern: /front-2/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
            - TargetOriginId: api-no-cache
              PathPattern: /api/*
              ViewerProtocolPolicy: redirect-to-https
              MinTTL: 0
              MaxTTL: 0
              DefaultTTL: 0
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              ForwardedValues:
                Headers:
                  - Authorization
                QueryString: true
          Enabled: true
          #DefaultRootObject: index.html
          HttpVersion: "http2"
          PriceClass: PriceClass_100
          # required for cname field
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.AcmCertificateArn}
            SslSupportMethod: sni-only
          IPV6Enabled: false
          Origins:
            - DomainName: "#{s3App1.DomainName}"
              Id: s3-app1
              S3OriginConfig:
                OriginAccessIdentity: "origin-access-identity/cloudfront/#{CloudFrontOriginAccessIdentity}"
            - DomainName: "#{s3App2.DomainName}"
              Id: s3-app2
              S3OriginConfig:
                OriginAccessIdentity: "origin-access-identity/cloudfront/#{CloudFrontOriginAccessIdentity}"
            - DomainName: ${self:custom.ApiOriginDomain}
              Id: api-no-cache
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                HTTPPort: 80
                HTTPSPort: 443
                OriginSSLProtocols:
                  - TLSv1.2
                  - TLSv1.1
                  - TLSv1
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      DependsOn:
        - CloudFrontDistribution
      Properties:
        HostedZoneId: ZVKYJGICISUM6
        Type: A
        Name: ${self:custom.Route53Cname}
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: "#{CloudFrontDistribution.DomainName}"
  Outputs:
    WebsiteURL:
      Value: "https://#{DnsRecord}"
    CloudFrontDomain:
      Description: "CloudFront Domain"
      Value: "#{CloudFrontDistribution.DomainName}"
    CloudFrontUrl:
      Description: "URL de CloudFront"
      Value: "https://#{CloudFrontDistribution.DomainName}"
    CloudFrontDistributionId:
      Description: "ID de CloudFront"
      Value: "#{CloudFrontDistribution}"
    CloudFrontConsole:
      Description: "Cloud Front short cut to console"
      Value: "https://console.aws.amazon.com/cloudfront/home#distribution-settings:#{CloudFrontDistribution}"
    s3App1:
      Value: "https://s3.console.aws.amazon.com/s3/buckets/#{s3App1}"
    s3App2:
      Value: "https://s3.console.aws.amazon.com/s3/buckets/#{s3App2}"